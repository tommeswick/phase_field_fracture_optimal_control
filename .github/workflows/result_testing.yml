name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  cache-dealii:
    runs-on: ubuntu-latest
    container: rockylinux:8  # Use Rocky Linux 8 container

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        # Update packages and install development tools
        yum update -y
        yum groupinstall -y "Development Tools"
        yum install -y epel-release
        yum config-manager --set-enabled powertools  # Enable PowerTools
        
        # Install necessary dependencies
        yum install -y cmake wget gcc gcc-c++ make git
    - name: Build and Install libaec from Source
      run: |
        # Download and build libaec from source
        wget https://gitlab.dkrz.de/k202009/libaec/-/archive/v1.0.6/libaec-v1.0.6.tar.gz
        tar -xzf libaec-v1.0.6.tar.gz
        cd libaec-v1.0.6
        mkdir build && cd build
        cmake ..
        make
        make install
        cd ../..
    - name: Install remaining dependencies
      run: |
        # Install additional dependencies for deal.II
        yum install -y hdf5 hdf5-devel --nobest
        yum install -y blas lapack boost boost-devel suitesparse suitesparse-devel metis metis-devel
        # Check if /usr/include/suitesparse exists, if not, create a symlink
        if [ ! -d "/usr/include/suitesparse" ]; then
          ln -s /usr/include /usr/include/suitesparse
        fi
    - name: Download deal.II tarball
      run: |
        wget https://dealii.org/downloads/dealii-9.5.1.tar.gz
    - name: Cache deal.II installation
      id: cache-dealii
      uses: actions/cache@v3
      with:
        path: ~/dealii
        key: dealii-9.5.1-with-umfpack-${{ runner.os }}-${{ hashFiles('dealii-9.5.1.tar.gz') }}
        restore-keys: |
          dealii-9.5.1-with-umfpack-${{ runner.os }}-
    - name: Install deal.II (if not cached)
      if: steps.cache-dealii.outputs.cache-hit != 'true'
      run: |
        tar -xzf dealii-9.5.1.tar.gz
        cd dealii-9.5.1
        cmake -DCMAKE_INSTALL_PREFIX=~/dealii -DDEAL_II_WITH_UMFPACK=ON -DDEAL_II_WITH_LAPACK=ON .
        make -j$(nproc)
        make install
        cd ..
    - name: Save deal.II Environment Variable
      run: |
        echo "DEAL_II_DIR=~/dealii" >> $GITHUB_ENV
    - name: Verify deal.II Cache
      run: |
        if [ -d "~/dealii" ]; then
          echo "deal.II is cached in ~/dealii."
        else
          echo "deal.II directory not found!"
        fi

  install-dopelib:
    runs-on: ubuntu-latest
    container: rockylinux:8
    needs: cache-dealii  # This job depends on the cache-dealii job

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies for DOpElib
      run: |
        # Install necessary packages for this job
        yum update -y
        yum install -y epel-release
        yum groupinstall -y "Development Tools"
        yum config-manager --set-enabled powertools  # Enable PowerTools
        yum install -y cmake wget gcc gcc-c++ make git blas lapack lapack-devel hdf5 hdf5-devel boost boost-devel suitesparse suitesparse-devel metis metis-devel
        # Check if /usr/include/suitesparse exists, if not, create a symlink
        if [ ! -d "/usr/include/suitesparse" ]; then
          ln -s /usr/include /usr/include/suitesparse
        fi
        # Set environment variables to help find LAPACK
        export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH
        export LAPACK_DIR=/usr/lib64
    - name: Restore Cache for deal.II
      uses: actions/cache@v3
      with:
        path: ~/dealii
        key: dealii-9.5.1-with-umfpack-${{ runner.os }}-${{ hashFiles('dealii-9.5.1.tar.gz') }}
        restore-keys: |
          dealii-9.5.1-with-umfpack-${{ runner.os }}-
    - name: Cache DOpElib installation
      id: cache-dopelib
      uses: actions/cache@v3
      with:
        path: ~/dopelib
        key: dopelib-cache-${{ runner.os }}
        restore-keys: |
          dopelib-cache-${{ runner.os }}
    - name: Set up environment variables for DOpElib
      run: |
        export DEAL_II_DIR=~/dealii
        echo "DEAL_II_DIR=$DEAL_II_DIR" >> $GITHUB_ENV
    - name: Install DOpElib (if not cached)
      if: steps.cache-dopelib.outputs.cache-hit != 'true'
      run: |
        # Clone DOpElib from GitHub
        git clone https://github.com/winnifried/dopelib.git ~/dopelib
        cd ~/dopelib/DOpEsrc
        # Set the environment variable for deal.II
        export DEAL_II_DIR=$DEAL_II_DIR
        
        # Run the autocmake.sh script to configure DOpElib
        ./autocmake.sh configure
        
        # Build DOpElib using make c-all as per the guide
        make c-all
        # Debugging: List the contents of the autobuild directories
        echo "Listing files in autobuild/release and autobuild/debug directories:"
        ls -R autobuild/release
        ls -R autobuild/debug
        # Copy the libraries to the expected location
        mkdir -p ~/dopelib/lib/cmake/DOpElib
        cp -r autobuild/release/* ~/dopelib/lib/cmake/DOpElib/ 2>/dev/null || echo "No files to copy from release."
        cp -r autobuild/debug/* ~/dopelib/lib/cmake/DOpElib/ 2>/dev/null || echo "No files to copy from debug."
        # Check if copying was successful
        echo "Listing ~/dopelib/lib/cmake/DOpElib/ contents:"
        ls ~/dopelib/lib/cmake/DOpElib/
    - name: Debug DOpElib Installation
      run: |
        echo "Listing ~/dopelib/lib/cmake/DOpElib/ contents:"
        ls ~/dopelib/lib/cmake/DOpElib/
        
  build:
    runs-on: ubuntu-latest
    container: rockylinux:8
    needs: install-dopelib  # This job depends on the install-dopelib job

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies for build
      run: |
        yum update -y
        yum install -y epel-release
        yum groupinstall -y "Development Tools"
        yum config-manager --set-enabled powertools  # Enable PowerTools
        yum install -y cmake wget gcc gcc-c++ make git blas lapack lapack-devel hdf5 hdf5-devel boost boost-devel suitesparse suitesparse-devel metis metis-devel
        # Check if /usr/include/suitesparse exists, if not, create a symlink
        if [ ! -d "/usr/include/suitesparse" ]; then
          ln -s /usr/include /usr/include/suitesparse
        fi
        # Set environment variables to help find LAPACK
        export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH
        export LAPACK_DIR=/usr/lib64
    - name: Restore Cache for deal.II
      uses: actions/cache@v3
      with:
        path: ~/dealii
        key: dealii-9.5.1-with-umfpack-${{ runner.os }}-${{ hashFiles('dealii-9.5.1.tar.gz') }}
        restore-keys: |
          dealii-9.5.1-with-umfpack-${{ runner.os }}-
    - name: Restore Cache for DOpElib
      uses: actions/cache@v3
      with:
        path: ~/dopelib
        key: dopelib-cache-${{ runner.os }}
        restore-keys: |
          dopelib-cache-${{ runner.os }}
    - name: Set up environment variables for deal.II and DOpElib
      run: |
        export DEAL_II_DIR=~/dealii
        export DOPELIB_DIR=~/dopelib
        echo "DEAL_II_DIR=$DEAL_II_DIR" >> $GITHUB_ENV
        echo "DOPELIB_DIR=$DOPELIB_DIR" >> $GITHUB_ENV
        echo "DOPE_DIR=$DOPELIB_DIR" >> $GITHUB_ENV
    - name: Build the project
      run: |
        # Set up environment variables
        export DEAL_II_DIR=~/dealii
        export DOPELIB_DIR=~/dopelib
        export DOPE_DIR=~/dopelib  # Set the DOPE_DIR environment variable
        # Debugging step: Check the presence of LAPACK and METIS libraries
        echo "Listing LAPACK libraries:"
        ls /usr/lib64/liblapack*
        echo "Listing METIS libraries:"
        ls /usr/lib64/libmetis*
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        make

    # Upload JCP_5_1_1 as an artifact so that the run-tests job can access it
    - name: Upload JCP_5_1_1 artifact
      uses: actions/upload-artifact@v3
      with:
        name: JCP-executable
        path: build/JCP_5_1_1

  run-tests:
    runs-on: ubuntu-latest
    container: rockylinux:8
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Download the artifact (JCP_5_1_1) from the build job
    - name: Download JCP_5_1_1 artifact
      uses: actions/download-artifact@v3
      with:
        name: JCP-executable
        path: .

    - name: Run tests
      run: |
        chmod +x ./run_tests.sh
        ./run_tests.sh

    - name: Upload dope.log as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: dope-log
        path: Results/dope.log

    - name: Upload terminal output as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: terminal-output
        path: terminal_output.log

  compare-tests:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download dope.log artifact
      uses: actions/download-artifact@v3
      with:
        name: dope-log
        path: ./downloaded-results

    - name: Compare dope.log with reference log
      run: |
        chmod +x ./compare_tests.sh
        ./compare_tests.sh ./downloaded-results/dope.log ./dope_Aug_12_2024.log
